tmp<-lapply(1:length(camera_locations[[ii]]$x1),function(y)
{
## CAMERA A
a<-data.frame(patch=ii,camera_site=y,camera="a")
## CAMERA B
b<-data.frame(patch=ii,camera_site=y,camera="b")
return(rbind(a,b))
})
tmp<-do.call("rbind",tmp)
return(tmp)
})
camera_polygons_df<-do.call("rbind",camera_polygons_df)
camera_polygons_df$id<- paste(camera_polygons_df$patch,camera_polygons_df$camera_site,
camera_polygons_df$camera,sep="-")
rownames(camera_polygons_df)<-camera_polygons_df$id
camera_polygons<- lapply(1:inputs$n_patches,function(ii)
{
tmp<-lapply(1:length(camera_locations[[ii]]$x1),function(y)
{
## CAMERA A
a<-camera
a$X<-a$X+camera_locations[[ii]][y,]$x1
a$Y<-a$Y+camera_locations[[ii]][y,]$x2
a<-data.frame(patch=ii,camera_site=y,camera="a",x=a$X,y=a$Y)
## CAMERA B
b<-camera
b$Y<-inputs$camera_distance/100+b$Y*-1
b$X<-b$X+camera_locations[[ii]][y,]$x1
b$Y<-b$Y+camera_locations[[ii]][y,]$x2
b<-data.frame(patch=ii,camera_site=y,camera="b",x=b$X,y=b$Y)
return(rbind(a,b))
})
tmp<-do.call("rbind",tmp)
return(tmp)
})
#------------------------------------ PROCESS THE POLYGONS----------------------------------------------
camera_polygons<-do.call("rbind",camera_polygons)
# AN ID TO KEEP TRACK OF PATCH/SITE/CAMERA
camera_polygons$id<- paste(camera_polygons$patch,camera_polygons$camera_site,camera_polygons$camera,sep="-")
# FACTOR TO KEEP ORDER AS IT WAS
camera_polygons$id<- factor(camera_polygons$id,levels=unique(camera_polygons$id))
# BREAK UP THE DATA.FRAME BY EACH PATCH/SITE/CAMERA COMBINATION
camera_polygons <- split(camera_polygons, camera_polygons$id)
# PROCESS INDVIDUAL CAMERA POLYGONS
camera_polygons <- lapply(camera_polygons, function(x)
{
tmp<- Polygon(x[,c(4,5)])
Polygons(list(tmp),as.character(unique(x[,6])))
})
# MAKE A SPATIAL POLYGONS DATASET....this makes it into a shape file
camera_polygons<-SpatialPolygons(camera_polygons)
plot(camera_polygons)
# SPATIAL DATA.FRAME NEEDED FOR SIMULATION LATER .....this may have an error if you don't run it all at once
camera_polygons_df <- SpatialPolygonsDataFrame(Sr=camera_polygons,
data=camera_polygons_df,match.ID = TRUE)
plot(camera_polygons)
patch_polys_df@data$y<- log(inputs$D)+log(patch_polys_df@data$patch_size_ha)
# EXPECTED NUMBER OF PIGS IN EACH PATCH
patch_polys_df@data$lambda<- exp(patch_polys_df@data$y)
# NUMBER OF PIGS IN EACH PATCH
patch_polys_df@data$N<- rpois(inputs$n_patches, patch_polys_df@data$lambda)
#---------------------------------Libraries:
library(sp)#most of these are for the simulations
library(geosphere)
library(geometry)
library(reshape2)
library(parallel)
library(raster)
library(rgeos)
library(jagsUI)
#------ The code for beginning data simulation -------
convex_poly <- function(n_sides, area)
{
radius <- sqrt((2*area)/(n_sides*sin((2*pi)/n_sides)))
angle <- (2*pi)/n_sides
radii <- rnorm(n_sides, radius, radius/10)# Randomize the radii/angles
angles <- rnorm(n_sides, angle, angle/10) * 1:n_sides
angles <- sort(angles)
points <- list(x=NULL, y=NULL)
points$x <- cos(angles) * radii
points$y <- sin(angles) * radii
m <- matrix(unlist(points), ncol=2)# Find the area of the polygon
m <- rbind(m, m[1,])
current_area <- 0.5 * (sum(m[1:n_sides,1]*m[2:(n_sides+1),2]) - sum(m[1:n_sides,2]*m[2:(n_sides+1),1]))
points$x <- points$x * sqrt(area/current_area)
points$y <- points$y * sqrt(area/current_area)
points$x<-c(points$x,points$x[1])# CLOSE THE POLYGON
points$y<-c(points$y,points$y[1])# CLOSE THE POLYGON
return (points) }
# ----------- Create the input list -------------
inputs<-list()
inputs$n_patches<- 3 #the number of fragmented habitats sampled
inputs$camara_density<- 1/20# 1 CAMERA PAIR PER 20 HECTARES
inputs$camera_distance<- 6 # DISTANCE BETWEEN CAMERAS IN METERS
inputs$patch_meta<- data.frame(patch_size_ha=runif(inputs$n_patches, 4,4000),#range of patch sizes
exposure= round(runif(inputs$n_patches,16,30),0))# NUMBER OF DAYS THE CAMERAS WERE OUT       # NUMER OF CAMERAS IN EACH PATCH
inputs$patch_meta$n_cameras<- round(inputs$patch_meta$patch_size_ha*inputs$camara_density,0)# NUMER OF CAMERAS IN EACH PATCH
inputs$patch_meta$patch<- rownames(inputs$patch_meta)
inputs$D<- 0.13 #Density of wild pigs
inputs$p<-0.6 #detection probability will remain constant to make this shorter
# MAKE A RANDOM POLYGON OF KNOWN AREA
patch_polys<-lapply(1:inputs$n_patches, function(x)
{
tmp<-convex_poly(n_sides=round(runif(1,4,23),0),
inputs$patch_meta$patch_size_ha[x])
return(data.frame(patch=x,x=tmp$x,y=tmp$y))
})
# PROCESS POLYGON INTO SPATIAL POLYGON
patch_polys <- lapply(patch_polys, function(x)
{
tmp<- Polygon(x[,c(2,3)])
Polygons(list(tmp),as.character(unique(x[,1])))
})
# MAKE A SPATIAL POLYGONS DATASET
patch_polys<-SpatialPolygons(patch_polys)
# MAKE SPATIAL DATA.FRAME NEEDED FOR SIMULATION LATER
patch_polys_df <- SpatialPolygonsDataFrame(Sr=patch_polys,
data=inputs$patch_meta,match.ID = TRUE)
#  effective area
detect<-structure(list(Picture.ID = c(12090002L, 12090010L, 12090011L,
12090013L, 12090016L, 12090019L, 12090039L, 12090043L, 12090050L,
12090055L, 12090063L, 12090067L, 12090094L, 12100101L, 12100106L,
12100114L, 12100132L, 12100144L, 121000148L, 121000174L, 12100187L,
12110198L, 12110201L, 12110205L, 12110216L, 12110222L, 12110242L,
12110261L, 12110265L, 12110275L, 12110279L, 12110285L, 12110287L,
12110288L, 12120294L, 12120296L, 12120304L), X = c(0, 2, 1.5,
0.25, -1.5, 2.5, 3, -1.5, 3, 0.5, 2, -0.5, 3, 3, -2.5, 3, -1.5,
3, -1, 1.5, -2, 3, -0.5, -0.5, 0.25, -2, -1.25, -1.75, -1.5,
-1.75, -0.75, 1.75, -0.25, -1.5, 2, -1.75, -0.75), Y = c(16L,
4L, 3L, 0L, 6L, 5L, 10L, 3L, 11L, 16L, 5L, 20L, 10L, 10L, 10L,
10L, 5L, 10L, 2L, 5L, 7L, 8L, 2L, 2L, 3L, 9L, 7L, 11L, 10L, 12L,
3L, 4L, 20L, 7L, 6L, 12L, 3L)), class = "data.frame", row.names = c(NA,
-37L))
detect$X<-detect$X-0.25 # This is to set origin to 0,0 for polygon
# SCALE X AND Y COORDINATES FROM METERS TO DECAMETERS
detect$X<- detect$X/100
detect$Y<- detect$Y/100
?chull
pp<-chull(detect$X,detect$Y)
pp <- c(pp, pp[1])
# MAKE A GENERIC POLYGON FOR EFFECTIVE CAMERA AREA
camera<-data.frame(PID=rep(1, length(pp)), POS=1:length(pp),
X=detect[pp,2], Y= detect[pp,3])
#---------------------Make the camera  locations------------------------------
camera_locations<-lapply(seq_along(patch_polys),function(x)
{
locs<-spsample(patch_polys[x],n=inputs$patch_meta$n_cameras[x],type="regular")
return(locs)
})
#-----------------This makes the sites for each camera within the patch (Camera area Polygon)
camera_polygons_df<- lapply(1:inputs$n_patches,function(ii)
{
tmp<-lapply(1:length(camera_locations[[ii]]$x1),function(y)
{
## CAMERA A
a<-data.frame(patch=ii,camera_site=y,camera="a")
## CAMERA B
b<-data.frame(patch=ii,camera_site=y,camera="b")
return(rbind(a,b))
})
tmp<-do.call("rbind",tmp)
return(tmp)
})
camera_polygons_df<-do.call("rbind",camera_polygons_df)
camera_polygons_df$id<- paste(camera_polygons_df$patch,camera_polygons_df$camera_site,
camera_polygons_df$camera,sep="-")
rownames(camera_polygons_df)<-camera_polygons_df$id
camera_polygons<- lapply(1:inputs$n_patches,function(ii)
{
tmp<-lapply(1:length(camera_locations[[ii]]$x1),function(y)
{
## CAMERA A
a<-camera
a$X<-a$X+camera_locations[[ii]][y,]$x1
a$Y<-a$Y+camera_locations[[ii]][y,]$x2
a<-data.frame(patch=ii,camera_site=y,camera="a",x=a$X,y=a$Y)
## CAMERA B
b<-camera
b$Y<-inputs$camera_distance/100+b$Y*-1
b$X<-b$X+camera_locations[[ii]][y,]$x1
b$Y<-b$Y+camera_locations[[ii]][y,]$x2
b<-data.frame(patch=ii,camera_site=y,camera="b",x=b$X,y=b$Y)
return(rbind(a,b))
})
tmp<-do.call("rbind",tmp)
return(tmp)
})
#------------------------------------ PROCESS THE POLYGONS----------------------------------------------
camera_polygons<-do.call("rbind",camera_polygons)
# AN ID TO KEEP TRACK OF PATCH/SITE/CAMERA
camera_polygons$id<- paste(camera_polygons$patch,camera_polygons$camera_site,camera_polygons$camera,sep="-")
# FACTOR TO KEEP ORDER AS IT WAS
camera_polygons$id<- factor(camera_polygons$id,levels=unique(camera_polygons$id))
# BREAK UP THE DATA.FRAME BY EACH PATCH/SITE/CAMERA COMBINATION
camera_polygons <- split(camera_polygons, camera_polygons$id)
# PROCESS INDVIDUAL CAMERA POLYGONS
camera_polygons <- lapply(camera_polygons, function(x)
{
tmp<- Polygon(x[,c(4,5)])
Polygons(list(tmp),as.character(unique(x[,6])))
})
# MAKE A SPATIAL POLYGONS DATASET....this makes it into a shape file
camera_polygons<-SpatialPolygons(camera_polygons)
plot(camera_polygons)
# SPATIAL DATA.FRAME NEEDED FOR SIMULATION LATER .....this may have an error if you don't run it all at once
camera_polygons_df <- SpatialPolygonsDataFrame(Sr=camera_polygons,
data=camera_polygons_df,match.ID = TRUE)
#------------Finally assign pigs to the sites-------
# CALCULATE THE LOG(NUMBER OF PIGS IN EACH PATCH)...this is simulated so that larger patches have more pigs
patch_polys_df@data$y<- log(inputs$D)+log(patch_polys_df@data$patch_size_ha)
# EXPECTED NUMBER OF PIGS IN EACH PATCH
patch_polys_df@data$lambda<- exp(patch_polys_df@data$y)
# NUMBER OF PIGS IN EACH PATCH
patch_polys_df@data$N<- rpois(inputs$n_patches, patch_polys_df@data$lambda)
#----------------Lastly simulate the data with the defined areas and species abundances
patch_data<- lapply(seq_along(patch_polys),function(ii)
{
# SUBSET CAMERA A AND B FROM THE PATCH
A<-subset(camera_polygons_df, patch==ii&camera=="a")
B<-subset(camera_polygons_df, patch==ii&camera=="b")
# SHARED AREA BY CAMERA A AND B IN HECATARES
AB<- A-(A-B)
# EXTRACT AREAS FOR CAMERA A, CAMERA B, AND SHARED BY A AND B IN HECATARES
area_A<-sapply(slot(A, "polygons"), slot, "area")
area_B<-sapply(slot(B, "polygons"), slot, "area")
area_AB<- sapply(slot(AB, "polygons"), slot, "area")
# CALCULATE TOTAL AREA FOR EACH CAMERA IN HECATARES
total_camera_areas<- area_A-area_AB+area_B-area_AB + area_AB
outside_area<- patch_polys_df$patch_size_ha[ii]-sum(total_camera_areas)
p<- c(outside_area,total_camera_areas)/sum(c(outside_area,total_camera_areas))
# RANDOMLY ASSIGN A PIG TO OUTSIDE OR A CAMERA PAIR (ASSUMES RANDOM DISTRIBUTION) - Not a great assumption since animal trails were targeted. This could affect the simulations.
# NUMBER OF PIGS IN EACH LOCATION (OUTSIDE, SITE 1, ... SITE N W/IN PATCH)
Z<-rmultinom(patch_polys_df$num_minutes[ii],
patch_polys_df$N[ii],
prob=p)
# DROP THE NUMBER OF CRITTERS THAT WERE OUTSIDE (I.E., NOT AVAILIBLE FOR CAPTURE)
Z<-Z[-1,]
# DROP THE MINUTES THAT THERE WERE NO CAPTURES
indx<- which(colSums(Z)>0)
# NOW FOR EACH PIG THAT WAS CAPTURED ON CAMERA--ASSIGN IT TO A STATE WITHIN THE CAMERA POLYGON
# MATRIX [SITE,STATE] OF WEIGHTS FOR EACH ARE ASSIGNED
wghts<-lapply(seq_along(total_camera_areas),function(x)
{
w<- c(area_A[x]-area_AB[x],area_B[x]-area_AB[x],area_AB[x])/total_camera_areas[x]
return(w)
})
wghts<-as.data.frame(do.call("rbind",wghts)) # SHOULD ALL BE THE SAME BUT BUILDS THE FLEXIBLITY OF VARIABLE DISTANCES BETWEEN CAMERAS @ A SITE
names(wghts)<- c("A","B","AB")
wghts$site<-names(area_A)
# ASSIGN AN INVIDUAL A TRUE CAPTURE STATE AND AN OBSERVED STATE
sites_within_patch_data<-lapply(indx,function(x)
{
hits<- which(Z[,x]>0)
n_captured<-Z[hits,x]
# EXPAND DATASET TO REPRESENT INDVIDUALS
tmp<- data.frame(patch= ii,
minute= x,
site=rep(names(Z[hits,x]),n_captured),
n_captured=rep(1,sum(n_captured)))
# RANDOMLY ASSIGN A STATE (1=Camera A but behind B, 2=Camera B but behind A, 3=between camera a and b)
tmp<-merge(tmp,wghts,by="site",all.x=TRUE)
tmp$state<-NA
tmp$capture_a<-NA # CAPTURED ON CAMERA A?
tmp$capture_b<-NA # CAPTURED ON CAMERA B?
for(i in 1:nrow(tmp))
{
# TRUE STATE
tmp$state[i]<- which(rmultinom(1,1,tmp[i,c(5:7)])==1)
# OBSERVATION STATE
if(tmp$state[i]==1)
{
tmp$capture_a[i]<-rbinom(1,1,inputs$p)
tmp$capture_b[i]<-0
}
if(tmp$state[i]==2)
{
tmp$capture_a[i]<-0;
tmp$capture_b[i]<-rbinom(1,1,inputs$p)
}
if(tmp$state[i]==3)
{
tmp$capture_a[i]<-rbinom(1,1,inputs$p)
tmp$capture_b[i]<-rbinom(1,1,inputs$p)
}
}
return(tmp)
})
out<-do.call("rbind",sites_within_patch_data)
return(out)
})
all_dat<-do.call("rbind",patch_data)
rm(list=ls())
#simulate some data
mean1=3
mean2=7
nobs=1000
sd1=1.2
y1=rnorm(nobs,mean=mean1,sd=sd1)
y2=rnorm(nobs,mean=mean2,sd=sd1)
#look at data
yjoin=c(y1,y2)
hist(yjoin,probability = T)
tmp=density(yjoin)
lines(tmp$x,tmp$y)
#look at residuals
resjoin=c(y1-mean1,y2-mean2)
hist(resjoin,probability=T)
tmp=density(resjoin)
lines(tmp$x,tmp$y)
seq1=seq(from=min(resjoin),to=max(resjoin),length.out=100)
media1=mean(resjoin)
sd1=sd(resjoin)
lines(seq1,dnorm(seq1,mean=media1,sd=sd1),col='red')
b=2
n=100
media=seq(from=0.1,to=10,length.out=n)
a=b*media
var1=a/(b^2)
plot(media,var1)
b=0.2
n=100
media=seq(from=0.1,to=10,length.out=n)
a=b*media
var1=a/(b^2)
plot(media,var1)
seq1=seq(from=-10,to=10,length.out=1000)
y=dt(seq1,df=4)
plot(seq1,y)
seq1=seq(from=-10,to=10,length.out=1000)
y=dt(seq1,df=4)
plot(seq1,y,type='l')
y=dt(seq1,df=100)
lines(seq1,y,col='red')
seq1=seq(from=-10,to=10,length.out=1000)
y=dt(seq1,df=4)
plot(seq1,y,type='l')
abline(v=2.5,col='grey')
1-pt(2.5,df=4)
abline(v=2,col='grey')
1-pt(2,df=4)
seq1=seq(from=-10,to=10,length.out=1000)
y=dt(seq1,df=4)
plot(seq1,y,type='l')
abline(v=1.5,col='grey')
1-pt(1.5,df=4)
y=dt(seq1,df=100)
lines(seq1,y,col='red')
1-pt(1.5,df=100)
seq1=seq(from=-10,to=10,length.out=1000)
y=dt(seq1,df=4)
plot(seq1,y,type='l')
tval=2
abline(v=tval,col='grey')
1-pt(tval,df=4)
y=dt(seq1,df=100)
lines(seq1,y,col='red')
1-pt(tval,df=100)
rm(list=ls())
library('foreach')
library('parallel')
?foreach
nobs=100
x=seq(from=0,to=100,length.out=nobs)
b0=1
b1=2
y=rnorm(nobs,mean=b0+b1*x,sd=1)
plot(x,y)
nobs=100
x=seq(from=0,to=100,length.out=nobs)
b0=1
b1=2
y=rnorm(nobs,mean=b0+b1*x,sd=10)
plot(x,y)
cor(dat)[1,2]
dat=data.frame(x=x,y=y)
cor(dat)[1,2]
nobs=100
x=seq(from=0,to=100,length.out=nobs)
b0=1
b1=1
y=rnorm(nobs,mean=b0+b1*x,sd=10)
plot(x,y)
dat=data.frame(x=x,y=y)
cor(dat)[1,2]
nobs=100
x=seq(from=0,to=100,length.out=nobs)
b0=1
b1=0.2
y=rnorm(nobs,mean=b0+b1*x,sd=10)
plot(x,y)
dat=data.frame(x=x,y=y)
cor(dat)[1,2]
mod=lm(y~x,data=dat)
mod
summary(mod)
nobs=100
x=seq(from=0,to=100,length.out=nobs)
b0=1
b1=-0.2
y=rnorm(nobs,mean=b0+b1*x,sd=10)
plot(x,y)
dat=data.frame(x=x,y=y)
cor(dat)[1,2]
mod=lm(y~x,data=dat)
summary(mod)
cor(dat)[1,2]^2
?cor
dat=data.frame(x=x,y=y,method='pearson')
cor(dat)[1,2]
nobs=100
x=seq(from=0,to=100,length.out=nobs)
b0=1
b1=-0.2
y=rnorm(nobs,mean=b0+b1*x,sd=10)
plot(x,y)
#calculate correlation
dat=data.frame(x=x,y=y,method='pearson')
cor(dat)[1,2]
dat=data.frame(x=x,y=y)
cor(dat,method='pearson')[1,2]
mod=lm(y~x,data=dat)
summary(mod)
cor(dat)[1,2]^2
#This code is based on "A primer on regression splines"
## $Id: spline_primer.Rnw,v 1.29 2013/01/22 17:43:52 jracine Exp jracine $
## April 23 2011. The code below is based upon an illustration that
## can be found in http://www.stat.tamu.edu/~sinha/research/note1.pdf
## by Dr. Samiran Sinha (Department of Statistics, Texas A&M). I am
## solely to blame for any errors and can be contacted at
## racinej@mcmaster.ca (Jeffrey S. Racine).
## This function is a (simplified) R implementation of the bs()
## function in the splines library and illustrates how the Cox-de Boor
## recursion formula is used to construct B-splines.
basis <- function(x, degree, i, knots) {
if(degree == 0){
B <- ifelse((x >= knots[i]) & (x < knots[i+1]), 1, 0)
} else {
if((knots[degree+i] - knots[i]) == 0) {
alpha1 <- 0
} else {
alpha1 <- (x - knots[i])/(knots[degree+i] - knots[i])
}
if((knots[i+degree+1] - knots[i+1]) == 0) {
alpha2 <- 0
} else {
alpha2 <- (knots[i+degree+1] - x)/(knots[i+degree+1] - knots[i+1])
}
B <- alpha1*basis(x, (degree-1), i, knots) + alpha2*basis(x, (degree-1), (i+1), knots)
}
return(B)
}
bs <- function(x, degree=3, interior.knots=NULL, intercept=FALSE, Boundary.knots = c(0,1)) {
Boundary.knots <- sort(Boundary.knots)
interior.knots.sorted <- sort(interior.knots)
knots <- c(rep(Boundary.knots[1], (degree+1)), interior.knots.sorted, rep(Boundary.knots[2], (degree+1)))
K <- length(interior.knots) + degree + 1
B.mat <- matrix(0,length(x),K)
for(j in 1:K) B.mat[,j] <- basis(x, degree, j, knots)
if(any(x == Boundary.knots[2])) B.mat[x == Boundary.knots[2], K] <- 1
if(intercept == FALSE) {
return(B.mat[,-1])
} else {
return(B.mat)
}
}
#look at what this looks likes
par(mfrow = c(2,1))
n <- 1000
x <- seq(0, 1, length=n)
B <- bs(x, degree=3, intercept = T, interior.knots=c(0.25,0.5,0.75),Boundary.knots=c(0, 1))
dim(B)
plot(NA,NA,xlim=range(x),ylim=range(B))
for (i in 1:ncol(B)) lines(x,B[,i],col=i)
abline(v=c(0.25,0.5,0.75),col='grey')
plot(NA,NA,xlim=range(x),ylim=range(B))
for (i in 1:ncol(B)) lines(x,B[,i],col=i)
abline(v=c(0.25,0.5,0.75),col='grey')
par(mfrow = c(2,1))
n <- 1000
x <- seq(0, 1, length=n)
B <- bs(x, degree=2, intercept = T, interior.knots=c(0.25,0.5,0.75),Boundary.knots=c(0, 1))
dim(B)
plot(NA,NA,xlim=range(x),ylim=range(B))
for (i in 1:ncol(B)) lines(x,B[,i],col=i)
abline(v=c(0.25,0.5,0.75),col='grey')
par(mfrow = c(1,1))
n <- 1000
x <- seq(0, 1, length=n)
B <- bs(x, degree=2, intercept = T, interior.knots=c(0.25,0.5,0.75),Boundary.knots=c(0, 1))
dim(B)
plot(NA,NA,xlim=range(x),ylim=range(B))
for (i in 1:ncol(B)) lines(x,B[,i],col=i)
abline(v=c(0.25,0.5,0.75),col='grey')
B <- bs(x, degree=3, intercept = T, interior.knots=c(0.25,0.5,0.75),Boundary.knots=c(0, 1))
dim(B)
plot(NA,NA,xlim=range(x),ylim=range(B))
for (i in 1:ncol(B)) lines(x,B[,i],col=i)
abline(v=c(0.25,0.5,0.75),col='grey')
c(2,3,3,4,1)
z=c(2,3,3,4,1)
sd(z)
z=c(2.1,3.1,2.9,3.9,1.2)
sd(z)
setwd('U:\\independent studies\\LIDAR Tanguro\\LidarLDA_MS\\simul\\results')
theta3=read.csv('theta3.csv'); colnames(theta3)=nomes
theta5=read.csv('theta5.csv'); colnames(theta5)=nomes
rm(list=ls(all=TRUE))
library(ggplot2)
nomes=1:10
setwd('U:\\independent studies\\LIDAR Tanguro\\LidarLDA_MS\\simul\\results')
theta3=read.csv('theta3.csv'); colnames(theta3)=nomes
theta5=read.csv('theta5.csv'); colnames(theta5)=nomes
