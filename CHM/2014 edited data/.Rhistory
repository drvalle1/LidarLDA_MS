phi1=get.phi(h=h1,mu1=mu1,sd1=sd1)
phi2=get.phi(h=h2,mu1=mu1,sd1=sd1)
log(phi1/phi2)
library('rstan')
install.packages('rstan')
library(rstan)
library(rethinking)
library(dplyr)
install.packages('rethinking')
install.packages('dplyr')
library(rstan)
# devtools::install_github("rmcelreath/rethinking")
library(rethinking)
library(dplyr)
n      <- 500           # number of individuals
income <- c(1, 2, 5)    # expected income of each career
score  <- 0.5 * income  # scores for each career, based on income
p <- softmax(score[1], score[2], score[3])
score
##############################################
### Multinomial regression example in Stan ###
##############################################
library(rstan)
# devtools::install_github("rmcelreath/rethinking")
library(rethinking)
library(dplyr)
# simulate career choices among 500 individuals
n      <- 500           # number of individuals
income <- c(1, 2, 5)    # expected income of each career
score  <- 0.5 * income  # scores for each career, based on income
# next line converts scores to probabilities
tmp <- exp(score)
p = tmp/sum(tmp)
p
career <- rep(NA, n)  # empty vector of choices for each individual
# sample chosen career for each individual
set.seed(34302)
# sample chosen career for each individual
for(i in 1:n) career[i] <- sample(1:3, size = 1, prob = p)
table(career)
mod.code <- "
data{
int N; // number of individuals
int K; // number of possible careers
int career[N]; // outcome
vector[K] career_income;
}
parameters{
vector[K - 1] a; // intercepts
real<lower=0> b; // association of income with choice
}
model{
vector[K] p;
vector[K] s;
a ~ normal(0, 1);
b ~ normal(0, 0.5);
s[1] = a[1] + b * career_income[1];
s[2] = a[2] + b * career_income[2];
s[3] = 0; // pivot
p = softmax(s);
career ~ categorical(p);
}
"
dat_list <-
list(N = n,
K = 3,
career = career,
career_income = income)
# fit the model
mod.res <-
stan(data = dat_list,
model_code = mod.code,
chains = 4)
?stan
mod.res <-
stan(data = dat_list,
model_code = mod.code,
chains = 4,iter=10000)
pairs(mod.res)
print(mod.res)
post <- extract.samples(mod.res)
# set up logit scores
s1      <- with(post, a[, 1] + b * income[1])
s2_orig <- with(post, a[, 2] + b * income[2])
s2_new  <- with(post, a[, 2] + b * income[2] * 2)
post <- extract.samples(mod.res)
post <- extract(mod.res)
str(post)
?with
income
s1      <- post$a[, 1] + post$b * income[1]
s1      <- post$a[, 1] + post$b * income[1]
s2_orig <- post$a[, 2] + post$b * income[2]
s2_new  <- post$a[, 2] + post$b * income[2] * 2
length(s1)
rm(list=ls())
library("BART")
library("MASS")
set.seed(99)
library("Rcpp")
set.seed(99)
x <- Boston[, c(6, 13)]
y <- Boston$medv
nd <- 200
burn <- 50
post <- wbart(x, y, nskip = burn, ndpost = nd)
install.packages('Rcpp')
install.packages("Rcpp")
rm(list=ls())
library("BART")
library("MASS")
library("Rcpp")
set.seed(99)
x <- Boston[, c(6, 13)]
y <- Boston$medv
nd <- 200
burn <- 50
post <- wbart(x, y, nskip = burn, ndpost = nd)
plot(post$sigma, type = "l")
abline(v = burn, lwd = 2, col = "red")
lmf <- lm(y~., data.frame(x, y))
fitmat <- cbind(y, post$yhat.train.mean, lmf$fitted.values)
colnames(fitmat) <- c("y", "BART", "Linear")
cor(fitmat)
rm(list=ls())
library('BART')
library('Rcpp')
sigma = 1.0  #y = f(x) + sigma*z , z~N(0,1)
n = 100      #number of observations
set.seed(99)
x=matrix(runif(n*10),n,10) #10 variables, only first 5 matter
Ey = 10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
y=Ey+sigma*rnorm(n)
lmFit = lm(y~.,data.frame(x,y)) #compare lm fit to BART later
set.seed(99)
bartFit = wbart(x,y,nskip=5,ndpost=5)
##run BART
set.seed(99)
bartFit = wbart(x,y)
##compare BART fit to linear matter and truth = Ey
fitmat = cbind(y,Ey,lmFit$fitted,bartFit$yhat.train.mean)
colnames(fitmat) = c('y','Ey','lm','bart')
print(cor(fitmat))
plot(bartFit$yhat.train,Ey)
dim(bartFit$yhat.train)
length(Ey)
plot(apply(bartFit$yhat.train,2,mean),Ey)
media.pred=apply(bartFit$yhat.train,2,mean)
rango=range(c(media.pred,Ey))
plot(media.pred,Ey,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rango=range(c(lmFit$fitted,Ey))
plot(lmFit$fitted,Ey,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
library(devtools)
install.packages('devtools')
library(devtools)
library(tidyverse)
library(fs)
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(devtools)
library(tidyverse)
library(fs)
create_package("U:\\independent studies\\package dev\\foofactors")
use_git()
?use_git
ntheta=1000
nrf=500
mu=3
psi2=1
tau2=0.3
theta=rnorm(ntheta,mean=mu,sd=sqrt(psi2))
res=rep(NA,ntheta)
for (i in 1:ntheta){
rf=rnorm(nrf,mean=theta[i],sd=sqrt(tau2))
res[i]=mean(rf)
}
tmp=density(res)
plot(tmp$x,tmp$y,type='l')
x=seq(from=-10,to=10,length.out=10000)
y=dnorm(x,mean=mu,sd=sqrt(psi2+(tau2/nrf)))
lines(x,y,col='red')
ntheta=10000
nrf=1000
mu=10
psi2=2
tau2=5
theta=rnorm(ntheta,mean=mu,sd=sqrt(psi2))
res=rep(NA,ntheta)
for (i in 1:ntheta){
rf=rnorm(nrf,mean=theta[i],sd=sqrt(tau2))
res[i]=mean(rf)
}
tmp=density(res)
plot(tmp$x,tmp$y,type='l')
x=seq(from=-10,to=10,length.out=10000)
y=dnorm(x,mean=mu,sd=sqrt(psi2+(tau2/nrf)))
lines(x,y,col='red')
plot(tmp$x,tmp$y,type='l')
x=seq(from=-100,to=100,length.out=10000)
y=dnorm(x,mean=mu,sd=sqrt(psi2+(tau2/nrf)))
lines(x,y,col='red')
ntheta=10000
nrf=1000
mu=10
psi2=2
tau2=5
theta=rnorm(ntheta,mean=mu,sd=sqrt(psi2))
res=rep(NA,ntheta)
for (i in 1:ntheta){
rf=rnorm(nrf,mean=theta[i],sd=sqrt(tau2))
res[i]=mean(rf)
}
tmp=density(res)
plot(tmp$x,tmp$y,type='l')
x=seq(from=-100,to=100,length.out=10000)
y=dnorm(x,mean=mu,sd=sqrt(psi2+(tau2/nrf)))
lines(x,y,col='red')
set.seed(1)
nobs=10000
y=rnorm(nobs,mean=3,sd=2)
var(y)
var(y)
mean(y^2)-(mean(y)^2)
set.seed(1)
nobs=10000
y=rnorm(nobs,mean=-1,sd=0.5)
var(y)
mean(y^2)-(mean(y)^2)
library('devtools')
devtools::install_github("drvalle1/LidarLDA")
rm(list=ls())
library('mvtnorm')
set.seed(1)
#get coordinates
nparcelas=50
coord=data.frame(x=runif(nparcelas),y=runif(nparcelas))
dist=as.matrix(dist(coord))
#simulate mu
m=30
omega2=5
CorrOmega=1;
Cormat=exp(-CorrOmega*dist); hist(Cormat)
mu=rmvnorm(1,mean=rep(m,nparcelas),sigma=omega2*Cormat)
#simulate theta
psi2=0.3
CorrPsi=2
Cormat=exp(-CorrPsi*dist); hist(Cormat)
rm(list=ls())
library('mvtnorm')
set.seed(1)
#get coordinates
nparcelas=50
coord=data.frame(x=runif(nparcelas),y=runif(nparcelas))
dist=as.matrix(dist(coord))
#simulate mu
m=30
omega2=5
CorrOmega=1;
Cormat=exp(-CorrOmega*dist); hist(Cormat)
0.384*60
23/60
0.384-(23/60)
z=0.384-(23/60)
z*3600
60*0.08
0.8*3600
0.08-(4/60)
z=0.08-(4/60)
z*3600
rm(list=ls())
library('data.table')
library('lidR')
library('foreign')
setwd('U:\\independent studies\\LIDAR\\GIS TAN\\topography')
topo=read.dbf('topography.dbf')
hist(topo$topography)
cond=topo$topography>50; mean(cond)
topo1=topo[cond,]; range(topo1$topography)
dt1 <- data.table(X = topo1$X,  Y = topo1$Y, ground = topo1$topography, key = "X,Y")
setwd('U:\\independent studies\\LIDAR\\tanguro\\TAN_A01_2014_LiDAR\\TAN_A01_2014_laz')
nomes.arq=list.files()
ind=grep('TANL',nomes.arq)
nomes.arq=nomes.arq[ind]
bin.size=50
ooo=1
print(ooo)
setwd('U:\\independent studies\\LIDAR\\tanguro\\TAN_A01_2014_LiDAR\\TAN_A01_2014_laz')
las = readLAS(nomes.arq[ooo])
# str(las@data)
# plot(las)
rangox=range(las@data$X); diff(rangox)
rangoy=range(las@data$Y); diff(rangoy)
rangoz=range(las@data$Z); diff(rangoz)
#get nice multiples of binsize for x and y
rangox[1]=floor(rangox[1]/bin.size)*bin.size
rangox[2]=ceiling(rangox[2]/bin.size)*bin.size
rangoy[1]=floor(rangoy[1]/bin.size)*bin.size
rangoy[2]=ceiling(rangoy[2]/bin.size)*bin.size
#get xnew
seq.x=seq(from=rangox[1],to=rangox[2],by=bin.size)
diff1=(seq.x[2]-seq.x[1])/2
mid.x=seq.x[-length(seq.x)]+diff1
tmp=as.numeric(cut(las@data$X,breaks=seq.x))
las@data$X=mid.x[tmp]
#get ynew
seq.y=seq(from=rangoy[1],to=rangoy[2],by=bin.size)
diff1=(seq.y[2]-seq.y[1])/2
mid.y=seq.y[-length(seq.y)]+diff1
tmp=as.numeric(cut(las@data$Y,breaks=seq.y))
las@data$Y=mid.y[tmp]
#combine data using data.table
cond=!(is.na(las@data$X) | is.na(las@data$Y) | is.na(las@data$Z)) &
las@data$ReturnNumber==1
dt2 <- data.table(X = las@data$X[cond],
Y = las@data$Y[cond],
Z = las@data$Z[cond], key = "X,Y")
#check if something is funny with coordinates
X=sort(unique(dt2$X)); nx=unique(diff(X))
Y=sort(unique(dt2$X)); ny=unique(diff(Y))
print(c(nx,ny))
dat2=merge(dt1, dt2)
dat2$Z=dat2$Z-dat2$ground
rm(las)
gc()
#make sure z is always equal or greater than zero
# hist(las@data$Z)
# range(las@data$Z,na.rm=T)
# mean(is.na(las@data$Z)) #proportion of missing z
cond=dat2$Z < 0; mean(cond)
dat2$Z[cond]=0
dat2$denis=1
tmp=aggregate(denis~X+Y,data=dat2,sum)
mean(tmp$denis>25000)
rm(list=ls())
library('data.table')
library('lidR')
library('foreign')
setwd('U:\\independent studies\\LIDAR\\GIS TAN\\topography')
topo=read.dbf('topography.dbf')
hist(topo$topography)
cond=topo$topography>50; mean(cond)
topo1=topo[cond,]; range(topo1$topography)
dt1 <- data.table(X = topo1$X,  Y = topo1$Y, ground = topo1$topography, key = "X,Y")
setwd('U:\\independent studies\\LIDAR\\tanguro\\TAN_A01_2014_LiDAR\\TAN_A01_2014_laz')
nomes.arq=list.files()
ind=grep('TANL',nomes.arq)
nomes.arq=nomes.arq[ind]
bin.size=50
for (ooo in 1:length(nomes.arq)){
print(ooo)
setwd('U:\\independent studies\\LIDAR\\tanguro\\TAN_A01_2014_LiDAR\\TAN_A01_2014_laz')
las = readLAS(nomes.arq[ooo])
# str(las@data)
# plot(las)
rangox=range(las@data$X); diff(rangox)
rangoy=range(las@data$Y); diff(rangoy)
rangoz=range(las@data$Z); diff(rangoz)
#get nice multiples of binsize for x and y
rangox[1]=floor(rangox[1]/bin.size)*bin.size
rangox[2]=ceiling(rangox[2]/bin.size)*bin.size
rangoy[1]=floor(rangoy[1]/bin.size)*bin.size
rangoy[2]=ceiling(rangoy[2]/bin.size)*bin.size
#get xnew
seq.x=seq(from=rangox[1],to=rangox[2],by=bin.size)
diff1=(seq.x[2]-seq.x[1])/2
mid.x=seq.x[-length(seq.x)]+diff1
tmp=as.numeric(cut(las@data$X,breaks=seq.x))
las@data$X=mid.x[tmp]
#get ynew
seq.y=seq(from=rangoy[1],to=rangoy[2],by=bin.size)
diff1=(seq.y[2]-seq.y[1])/2
mid.y=seq.y[-length(seq.y)]+diff1
tmp=as.numeric(cut(las@data$Y,breaks=seq.y))
las@data$Y=mid.y[tmp]
#combine data using data.table
cond=!(is.na(las@data$X) | is.na(las@data$Y) | is.na(las@data$Z)) &
las@data$ReturnNumber==1
dt2 <- data.table(X = las@data$X[cond],
Y = las@data$Y[cond],
Z = las@data$Z[cond], key = "X,Y")
#check if something is funny with coordinates
X=sort(unique(dt2$X)); nx=unique(diff(X))
Y=sort(unique(dt2$X)); ny=unique(diff(Y))
print(c(nx,ny))
dat2=merge(dt1, dt2)
dat2$Z=dat2$Z-dat2$ground
rm(las)
gc()
#make sure z is always equal or greater than zero
# hist(las@data$Z)
# range(las@data$Z,na.rm=T)
# mean(is.na(las@data$Z)) #proportion of missing z
cond=dat2$Z < 0; mean(cond)
dat2$Z[cond]=0
# hist(las@data$Z)
#how many points
# dat2$denis=1
# tmp=aggregate(denis~X+Y,data=dat2,sum)
# mean(tmp$denis>25000) #95%
# hist(tmp$denis)
#thin the data to 25,000 observations in each grid cell
nobs=25000
coord=unique(dat2[,c('X','Y')])
ncoord=nrow(coord)
res=matrix(NA,ncoord,5)
for (i in 1:ncoord){
cond=dat2$X==coord$X[i] & dat2$Y==coord$Y[i]
dat3=dat2[cond,]
ind=sample(1:sum(cond),size=nobs)
dat4=dat3[ind,]
res[i,]=c(coord$X[i],coord$Y[i],median(dat4$Z),quantile(dat4$Z,0.99),nrow(dat4))
}
colnames(res)=c('X','Y','median','q99','nobs')
setwd('U:\\independent studies\\LIDAR Tanguro\\CHM\\2014 edited data')
nome1=nomes.arq[ooo]
nome2=gsub('.laz','.csv',nome1)
write.csv(res,nome2,row.names=F)
}
ind=sample(1:sum(cond),size=min(c(sum(cond),nobs)))
min(c(sum(cond),nobs))
rm(list=ls())
library('data.table')
library('lidR')
library('foreign')
setwd('U:\\independent studies\\LIDAR\\GIS TAN\\topography')
topo=read.dbf('topography.dbf')
hist(topo$topography)
cond=topo$topography>50; mean(cond)
topo1=topo[cond,]; range(topo1$topography)
dt1 <- data.table(X = topo1$X,  Y = topo1$Y, ground = topo1$topography, key = "X,Y")
setwd('U:\\independent studies\\LIDAR\\tanguro\\TAN_A01_2014_LiDAR\\TAN_A01_2014_laz')
nomes.arq=list.files()
ind=grep('TANL',nomes.arq)
nomes.arq=nomes.arq[ind]
bin.size=50
for (ooo in 1:length(nomes.arq)){
print(ooo)
setwd('U:\\independent studies\\LIDAR\\tanguro\\TAN_A01_2014_LiDAR\\TAN_A01_2014_laz')
las = readLAS(nomes.arq[ooo])
# str(las@data)
# plot(las)
rangox=range(las@data$X); diff(rangox)
rangoy=range(las@data$Y); diff(rangoy)
rangoz=range(las@data$Z); diff(rangoz)
#get nice multiples of binsize for x and y
rangox[1]=floor(rangox[1]/bin.size)*bin.size
rangox[2]=ceiling(rangox[2]/bin.size)*bin.size
rangoy[1]=floor(rangoy[1]/bin.size)*bin.size
rangoy[2]=ceiling(rangoy[2]/bin.size)*bin.size
#get xnew
seq.x=seq(from=rangox[1],to=rangox[2],by=bin.size)
diff1=(seq.x[2]-seq.x[1])/2
mid.x=seq.x[-length(seq.x)]+diff1
tmp=as.numeric(cut(las@data$X,breaks=seq.x))
las@data$X=mid.x[tmp]
#get ynew
seq.y=seq(from=rangoy[1],to=rangoy[2],by=bin.size)
diff1=(seq.y[2]-seq.y[1])/2
mid.y=seq.y[-length(seq.y)]+diff1
tmp=as.numeric(cut(las@data$Y,breaks=seq.y))
las@data$Y=mid.y[tmp]
#combine data using data.table
cond=!(is.na(las@data$X) | is.na(las@data$Y) | is.na(las@data$Z)) &
las@data$ReturnNumber==1
dt2 <- data.table(X = las@data$X[cond],
Y = las@data$Y[cond],
Z = las@data$Z[cond], key = "X,Y")
#check if something is funny with coordinates
X=sort(unique(dt2$X)); nx=unique(diff(X))
Y=sort(unique(dt2$X)); ny=unique(diff(Y))
print(c(nx,ny))
dat2=merge(dt1, dt2)
dat2$Z=dat2$Z-dat2$ground
rm(las)
gc()
#make sure z is always equal or greater than zero
# hist(las@data$Z)
# range(las@data$Z,na.rm=T)
# mean(is.na(las@data$Z)) #proportion of missing z
cond=dat2$Z < 0; mean(cond)
dat2$Z[cond]=0
# hist(las@data$Z)
#how many points
# dat2$denis=1
# tmp=aggregate(denis~X+Y,data=dat2,sum)
# mean(tmp$denis>25000) #95%
# hist(tmp$denis)
#thin the data to 25,000 observations in each grid cell
nobs=25000
coord=unique(dat2[,c('X','Y')])
ncoord=nrow(coord)
res=matrix(NA,ncoord,5)
for (i in 1:ncoord){
cond=dat2$X==coord$X[i] & dat2$Y==coord$Y[i]
dat3=dat2[cond,]
ind=sample(1:sum(cond),size=min(c(sum(cond),nobs)))
dat4=dat3[ind,]
res[i,]=c(coord$X[i],coord$Y[i],median(dat4$Z),quantile(dat4$Z,0.99),nrow(dat4))
}
colnames(res)=c('X','Y','median','q99','nobs')
setwd('U:\\independent studies\\LIDAR Tanguro\\CHM\\2014 edited data')
nome1=nomes.arq[ooo]
nome2=gsub('.laz','.csv',nome1)
write.csv(res,nome2,row.names=F)
}
